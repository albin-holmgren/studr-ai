// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  avatar        String?
  language      String?   @default("en")
  region        String?   @default("US")
  stripeCustomerId String?
  subscriptionStatus String? @default("free")
  subscriptionTier  String? @default("free")
  subscriptionPeriodEnd DateTime?
  paymentMethods PaymentMethod[]
  payments      Payment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  workspaces    Workspace[]
  notes         Note[]
  chatMessages  ChatMessage[]
  noteHistory   NoteHistory[]
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  emoji       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes       Note[]
}

model Note {
  id          String    @id @default(cuid())
  title       String
  content     String?   @db.Text
  emoji       String?   @default("üìù")
  purpose     String?   @db.Text
  archived    Boolean   @default(false)
  workspaceId String
  userId      String
  linkAccess  String    @default("viewer") // 'viewer', 'editor', or 'admin'
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  suggestions Suggestion[]
  citations   Citation[]
  gradingCriteria GradingCriteria[]
  history     NoteHistory[]
  access      NoteAccess[]
}

model PaymentMethod {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripePaymentMethodId String
  last4         String
  brand         String
  expMonth      Int
  expYear       Int
  isDefault     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Payment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Float
  currency      String
  status        String
  stripeInvoiceId String?
  createdAt     DateTime  @default(now())
}

model Suggestion {
  id          String    @id @default(cuid())
  noteId      String
  type        String
  title       String
  summary     String    @db.Text
  highlights  String[]
  score       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  note        Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
}

model Reference {
  id          String    @id @default(cuid())
  title       String
  authors     String[]
  content     String    @db.Text
  journal     String?
  year        Int?
  volume      String?
  issue       String?
  pages       String?
  url         String?
  embedding   Json      @db.JsonB
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  citations   Citation[]
}

model Citation {
  id          String    @id @default(cuid())
  noteId      String
  referenceId String
  context     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  note        Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)
  reference   Reference @relation(fields: [referenceId], references: [id], onDelete: Cascade)

  @@index([noteId])
  @@index([referenceId])
}

model GradingCriteria {
  id          String    @id @default(cuid())
  noteId      String
  fileName    String
  fileUrl     String
  fileType    String
  createdAt   DateTime  @default(now())
  note        Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)
}

model NoteHistory {
  id          String    @id @default(cuid())
  noteId      String
  title       String
  content     String?   @db.Text
  emoji       String?
  changeType  String    // e.g., "title_change", "content_update", "emoji_change", "purpose_update"
  changeSummary String? @db.Text
  userId      String
  createdAt   DateTime  @default(now())
  note        Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([noteId])
  @@index([userId])
}

model NoteAccess {
  id        String   @id @default(cuid())
  noteId    String
  userId    String
  role      String   // 'viewer', 'editor', 'admin'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noteId, userId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String   @db.Text
  role      String   // 'user' or 'assistant'
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
